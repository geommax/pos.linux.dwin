#!/bin/bash

#   idVendor           0x13fe Kingston Technology Company Inc.
#   idProduct          0x6700 

## Maintained By Geommax.

##     ~/$    lsusb -v 2>/dev/null
##     ~/$    udevadm monitor --property --udev
##     ~/$    sudo udevadm control --reload-rules && sudo udevadm trigger



# Bus 002 Device 003: ID 13fe:6700 Kingston Technology Company Inc. USB DISK 3.0
# Device Descriptor:
#   bLength                18
#   bDescriptorType         1
#   bcdUSB               3.20
#   bDeviceClass            0 
#   bDeviceSubClass         0 
#   bDeviceProtocol         0 
#   bMaxPacketSize0         9
#   idVendor           0x13fe Kingston Technology Company Inc.
#   idProduct          0x6700 
#   bcdDevice            1.10
#   iManufacturer           1         
#   iProduct                2 USB DISK 3.0
#   iSerial                 3 0721341F8E98BB06
#   bNumConfigurations      1
#   Configuration Descriptor:
#     bLength                 9
#     bDescriptorType         2
#     wTotalLength       0x002c
#     bNumInterfaces          1
#     bConfigurationValue     1
#     iConfiguration          0 
#     bmAttributes         0x80
#       (Bus Powered)
#     MaxPower              504mA
#     Interface Descriptor:
#       bLength                 9
#       bDescriptorType         4
#       bInterfaceNumber        0
#       bAlternateSetting       0
#       bNumEndpoints           2
#       bInterfaceClass         8 Mass Storage
#       bInterfaceSubClass      6 SCSI
#       bInterfaceProtocol     80 Bulk-Only
#       iInterface              0 
#       Endpoint Descriptor:
#         bLength                 7
#         bDescriptorType         5
#         bEndpointAddress     0x81  EP 1 IN
#         bmAttributes            2
#           Transfer Type            Bulk
#           Synch Type               None
#           Usage Type               Data
#         wMaxPacketSize     0x0400  1x 1024 bytes
#         bInterval               0
#         bMaxBurst               3
#       Endpoint Descriptor:
#         bLength                 7
#         bDescriptorType         5
#         bEndpointAddress     0x02  EP 2 OUT
#         bmAttributes            2
#           Transfer Type            Bulk
#           Synch Type               None
#           Usage Type               Data
#         wMaxPacketSize     0x0400  1x 1024 bytes
#         bInterval               0
#         bMaxBurst               3
#######################################################################

# Allowed USB Serial Number
USB_SERIAL="0721341F8E98BB06"

# Mount point
MOUNT_POINT="$HOME/report_backup"

# Source directory
SOURCE_DIR="$HOME/Downloads"
EXTENSIONS=("xlsx" "csv" "backup")
#USB_DEVICE="sdb1"
WHERE_BLK_DEVICE=$(lsblk -o NAME,SERIAL | grep "$USB_SERIAL" | awk '{print $1}')
USB_DEVICE="${WHERE_BLK_DEVICE}1"

# Log file
LOG_FILE="/home/bot/usb.log"
#-----------------------------------------------------------
#-----------------------------------------------------------
# Function to flash red screen
flash_red_screen() {
    for i in {1..5}; do
        xrandr --output $(xrandr | grep " connected" | awk '{print $1}') --gamma 1:0:0
        sleep 0.2
        xrandr --output $(xrandr | grep " connected" | awk '{print $1}') --gamma 1:1:1
        sleep 0.2
    done
}

# Start Logging
echo "====== USB Backup Script Started: $(date) ======" >> "$LOG_FILE"
#-----------------------------------------------------------
# Detect USB by serial number
if ! lsusb -v 2>/dev/null | grep -q "$USB_SERIAL"; then
    echo "Allowed USB not found!" >> "$LOG_FILE"
    exit 1
fi  
#-----------------------------------------------------------
# Create mount point if not exists
mkdir -pv "$MOUNT_POINT" >> "$LOG_FILE" 2>&1

#-----------------------------------------------------------
# if ! df -h | grep -q "$USB_DEVICE"; then
#     echo "USB is not mounted yet, Trying to mount!" >> "$LOG_FILE"
#     sudo mount "$USB_DEVICE" "$MOUNT_POINT" >> "$LOG_FILE" 2>&1
#     if [[ $? -ne 0 ]]; then
#         echo "Failed to mount USB!" >> "$LOG_FILE"
#         exit 1
#     fi
# else
#     echo "USB is already mounted at $MOUNT_POINT" >> "$LOG_FILE"
# fi
sudo mount "$USB_DEVICE" "$MOUNT_POINT" >> "$LOG_FILE" 2>&1
#==========================================================
echo "USB Mounted Successfully at $MOUNT_POINT" >> "$LOG_FILE"

# Remove existing backup files in USB
echo "Removing old backup files in USB..." >> "$LOG_FILE"
for ext in "${EXTENSIONS[@]}"; do
    find "$MOUNT_POINT" -type f -name "*.$ext" -exec rm -f {} \; >> "$LOG_FILE" 2>&1
done

#-----------------------------------------------------------
# Copy files and verify
COPY_SUCCESS=true

for ext in "${EXTENSIONS[@]}"; do
    for file in "$SOURCE_DIR"/*.$ext; do
        [ -e "$file" ] || continue

        # Copy the file
        cp -v "$file" "$MOUNT_POINT/" >> "$LOG_FILE" 2>&1

        # Verify the file was copied correctly
        dest_file="$MOUNT_POINT/$(basename "$file")"
        if [[ -f "$dest_file" ]]; then
            echo "Copied: $file -> $dest_file" >> "$LOG_FILE"
        else
            echo "Failed to copy: $file" >> "$LOG_FILE"
            COPY_SUCCESS=false
        fi
    done
done
#-----------------------------------------------------------
# Delete originals only if all copies succeeded
if $COPY_SUCCESS; then
    echo "All files copied successfully, deleting originals..." >> "$LOG_FILE"
    for ext in "${EXTENSIONS[@]}"; do
        rm -f "$SOURCE_DIR"/*.$ext >> "$LOG_FILE" 2>&1
    done
else
    echo "Copy verification failed! Keeping original files." >> "$LOG_FILE"
    #flash_red_screen
fi
#-----------------------------------------------------------
# Sync to ensure all writes are completed
sync >> "$LOG_FILE" 2>&1
#-----------------------------------------------------------
# Unmount USB
sudo umount "$USB_DEVICE" >> "$LOG_FILE" 2>&1

echo "USB Unmounted Successfully!" >> "$LOG_FILE"
#-----------------------------------------------------------
# Flash red screen as an alert
#flash_red_screen

echo "Backup process completed!" >> "$LOG_FILE"
#-----------------------------------------------------------